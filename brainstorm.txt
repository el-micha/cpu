
CPU

word / register length
defined instructions -> alu abstracted away by instrs

- fetch instruction from instruction pointer 
- decode: split word into opcode and operands
- execute: result ends up in a register

progam counter, data registers, status registers, stack pointer, memory

instruction types:
- set register to constant value (where does that value come from?)
- copy from register to register
- copy from register to memory adress and vice versa
- read and write from device -> IO

- add, subtract, multiply, bitshift, xor etc
- compare to values in registers -> result? 

- branch to other instruction
- conditionally branch
- call with later jumpback

data CPU = Memory PC Registers

need an inputstream device and an outputstream device... 
Fetch the instruction, Fetch the operands, do the instruction, write the results.

-- R opcode 6, rs 5, rt 5 rd 5, shamt 5, funct 6
-- I opcode 6, rs 5, rt 5, immediate 16
-- J opcode 6, address 26
-- addressing mode: base + displacement 

data Bit = Zero | One
type Word' = Vector Bit
type RAM = Vector Word'
type Register = Word'
type DataRegisters = [Register]
type PC = Register
type StackPointer = Register
type StatusRegister = Register

-- ============
higher language keywords: 
if, else
int, char
for, while, break, continue
sizeof
struct
return 
*, &, 


